619. Biggest Single Number------------------------------------------------

'using subquery in from'
select max(num) as num
from (select num, count(num) as countnum
    from MyNumbers
    group by num
    having count(num) <= 1) as a

'or using CTE'
with temp as (
    select num, count(num) as countnum
    from MyNumbers
    group by num)

select max(num) as num
from temp
where countnum = 1


1164. Product Price at a Given Date------------------------------------------------

select product_id, new_price as price 
from Products 
where (product_id, change_date) 
in (select product_id , max(change_date) as date 
    from Products 
    where change_date <='2019-08-16' 
    group by product_id)

union

select distinct product_id, 10 as price 
from Products 
where product_id not in (
    select distinct product_id 
    from Products 
    where change_date <='2019-08-16' )


1148. Article Views I------------------------------------------------

select distinct(author_id) as id
from Views 
where author_id  = viewer_id 
order by id asc


596. Classes More Than 5 Students------------------------------------------------

select class
from Courses 
group by class 
having count(*) > 4


1378. Replace Employee ID With The Unique Identifier------------------------------------------------

select ei.unique_id, e.name
from Employees e left join EmployeeUNI ei on e.id = ei.id    


1527. Patients With a Condition------------------------------------------------

select *
from Patients 
where conditions like 'DIAB1%' or conditions like '% DIAB1%' 


180. Consecutive Numbers------------------------------------------------

#Figures may be repeated more than 3 times, using distinct to avoid repeated number
方法1：'using subquery in from'
select distinct num as ConsecutiveNums 
from(
    select num,
    lag(num, 1) over (order by id) as next1, 
    lag(num, 2) over (order by id) as next2
    from Logs) as temp
where num = next1 and next1= next2

資料會變成下面的樣子
| num | next1 | next2 |
| --- | ----- | ----- |
| 1   | null  | null  |
| 1   | 1     | null  |
| 1   | 1     | 1     |
| 2   | 1     | 1     |
| 1   | 2     | 1     |
| 2   | 1     | 2     |
| 2   | 2     | 1     |

方法2：'using cte'
with cte as (
    select num,
    lead(num,1) over() num1,
    lead(num,2) over() num2
    from logs)

select distinct num ConsecutiveNums 
from cte 
where (num=num1) and (num=num2)

方法3：
SELECT DISTINCT num AS ConsecutiveNums
FROM (
    SELECT num,
           LAG(num) OVER (ORDER BY id) AS prev_num,
           LEAD(num) OVER (ORDER BY id) AS next_num
    FROM Logs
) AS temp
WHERE num = prev_num AND num = next_num;

方法4：'not using cte or subquery'
select distinct L1.num as ConsecutiveNums 
from Logs L1, Logs L2, Logs L3
where L1.id = L2.id-1 and 
    L2.id = L3.id-1 and 
    L1.num = L2.num and 
    L2.num = L3.num


1204. Last Person to Fit in the Bus------------------------------------------------

select person_name
from (
    select *, sum(weight) over (order by turn) as Total_Weight
    from Queue) temp
where Total_Weight <= 1000
order by turn desc
limit 1;

#When using turn: subquery are used to find the passenger with the largest turn value. 
#but using 'limit1' and 'order by desc' are faster
select person_name
from (select person_name, turn, sum(weight) over (order by turn) as Total_Weight
    from Queue) temp
where Total_Weight <= 1000
    and turn = ( select max(turn)
        from (select turn, sum(weight) over (order by turn) as Total_Weight
            from Queue) subquery
        where Total_Weight <= 1000);


585. Investments in 2016------------------------------------------------

select round(sum(tiv_2016),2) as tiv_2016
from Insurance
where tiv_2015 in (
    select tiv_2015
    from Insurance
    group by tiv_2015
    having count(*) > 1)
and (lat, lon) in (
    select lat, lon
    from Insurance
    group by lat, lon
    having count(*) = 1);

'or using cte'
with duplicated_tiv2015 as (
    select tiv_2015
    from Insurance
    group by tiv_2015
    having COUNT(*) > 1),
unique_location as (
    select lat, lon
    from Insurance
    group by lat, lon
    having COUNT(*) = 1)

select round(sum(tiv_2016), 2) as tiv_2016
from Insurance
where tiv_2015 in (select tiv_2015 from duplicated_tiv2015)
and (lat, lon) in (select lat, lon from unique_location);


185. Department Top Three Salaries------------------------------------------------

select Department, Employee, Salary
from (
    select e.name as Employee, 
        e.salary as Salary, 
        d.name as Department,
        dense_rank() over (partition by e.departmentId order by e.salary desc) as salaryrank
    from Employee e left join Department d on e.departmentId  = d.id) as temp
where salaryrank <= 3


1341. Movie Rating------------------------------------------------

# Write your MySQL query statement below
(select u.name as results
from MovieRating r inner join Users u on r.user_id = u.user_id
group by u.name
order by count(*) desc, u.name
limit 1)

union all

(select m.title as results
from MovieRating r inner join Movies m on r.movie_id = m.movie_id
where r.created_at >= '2020-02-01' and r.created_at < '2020-03-01' 
group by m.title
order by avg(rating) desc, m.title
limit 1)

#order by 可以用聚合函數，e.g. order by avg(mr.rating) desc, m.title


1731. The Number of Employees Which Report to Each Employee------------------------------------------------

'using cte and inner join. Found reports_to first, then select name'
with temp as (
select reports_to, count(reports_to) as reports_count, round(avg(age), 0) as average_age 
from Employees 
group by reports_to 
having count(reports_to) > 0)

select t.reports_to as employee_id, e.name as name, reports_count, average_age
from temp t left join Employees e on t.reports_to = e.employee_id
order by employee_id


'using inner join. Self join first'
select 
    m.employee_id,
    m.name,
    count(e.reports_to) as reports_count,
    round(avg(e.age),0) as average_age
from employees e inner join employees m 
    on m.employee_id = e.reports_to
group by m.employee_id
order by m.employee_id


1321. Restaurant Growth------------------------------------------------
方法1：
with cte as (
    select visited_on, sum(amount) as total_amount
    from Customer 
    group by visited_on
    order by visited_on)
    
select visited_on, 
    sum(total_amount) over (rows between 6 preceding and current row) as amount,
    round(avg(total_amount) over ( 
        rows between 6 preceding and current row),2) as average_amount
from cte
limit 6,999


1907. Count Salary Categories------------------------------------------------

'using union'
select 'Low Salary' as  category, count(account_id) as accounts_count
from Accounts 
where income < 20000
union
select 'Average Salary' as category, count(account_id) as accounts_count
from Accounts 
where  income between 20000 and 50000
union
select 'High Salary' as category, count(account_id) as accounts_count
from Accounts 
where income > 50000

'using cte and union'
with ct1 as
(select case when income < 20000 then "Low Salary"
when income >= 20000 and income <= 50000 then "Average Salary"
else "High Salary"
end as category, account_id
from accounts) ,

ct2 as
(select category , count(*) as c
from ct1
group by category ) ,

ct3 as
(select "High Salary" as category
union select "Low Salary" as category
union select "Average Salary" as category)

select ct3.category ,
case when ct2.c is not null
then ct2.c
else 0
end as accounts_count
from ct2 
right join ct3 
on ct2.category = ct3.category;


1280. Students and Examinations------------------------------------------------

select st.student_id, st.student_name, su.subject_name, count(e.subject_name) as attended_exams 
from Students st cross join Subjects su
    left join Examinations e 
    on su.subject_name = e.subject_name and st.student_id = e.student_id
group by st.student_id, st.student_name, su.subject_name
order by st.student_id, su.subject_name



1789. Primary Department for Each Employee------------------------------------------------

'using union'
select  employee_id, department_id 
from Employee 
where primary_flag = 'Y'
union
select employee_id, department_id 
from Employee
group by employee_id 
having count(employee_id) = 1

'using subquery in where'
select  employee_id, department_id 
from Employee 
where primary_flag = 'Y' or
    employee_id in (
        select employee_id
        from Employee
        group by employee_id 
        having count(employee_id) = 1)


1667. Fix Names in a Table------------------------------------------------

select user_id,
    concat(upper(substring(name, 1,1)),  
    lower(substring(name, 2))) as name
from Users 
order by user_id 

1633. Percentage of Users Attended a Contest------------------------------------------------
'using subquery in select'
select contest_id, round(count(user_id) / (select distinct count(user_id) from Users) *100, 2) as percentage
from Register 
group by contest_id
order by percentage desc, contest_id

'using join but not very meaningful.'
select r.contest_id, round(count(u.user_id) / (select count(distinct user_id) from Users) *100, 2) as percentage
from Register r inner join Users u on r.user_id = u.user_id 
group by r.contest_id
order by percentage desc, r.contest_id asc


1193. Monthly Transactions I------------------------------------------------

select DATE_FORMAT(trans_date, '%Y-%m') as month,
    country,
    count(*) as trans_count,
    sum(state = 'approved') as approved_count, 
    sum(amount) as trans_total_amount, 
    sum(if(state = 'approved', amount, 0)) as approved_total_amount 
from Transactions 
group by country, month

#'sum(state = 'approved') as approved_count' is calculated Boolean value (0 or 1) 
generated by (state = 'approved'), cannot use count to replace sum


1517. Find Users With Valid E-Mails------------------------------------------------20
'using REGEXP'

select * from Users
WHERE mail REGEXP '^[A-Za-z][A-Za-z0-9_\.\-]*@leetcode(\\?com)?\\.com$';


1070. Product Sales Analysis III------------------------------------------------

select product_id, year as first_year, quantity, price 
from Sales
where (product_id,year) in
  (select product_id, min(year) as year
  from Sales 
  group by product_id)

#以下是錯誤：以下缺乏指定quantity, price的部分，不確定quantity, price會從哪個product_id, year提取，
#所以上方先用subquery找(product_id, 最小年份)，用主要的資料庫去比對，找到有(product_id, 最小年份)的列
select product_id, min(year) as first_year, quantity, price 
from Sales 
group by product_id


1978. Employees Whose Manager Left the Company------------------------------------------------

select employee_id 
from Employees 
where manager_id not in (select employee_id from Employees) and salary < 30000
order by employee_id asc

#not in 不能直接用在column，只能用在數值，要搭配subquery使用，e.g. where [column] not in (select [column] from [table]) /or/ where [column] not in [value]

# sub_query的概念，先寫出sub
# 目標，在要選出產品銷售第一年的product_id, year, quantity, price
# 先選出有哪些是第一年，把資料用product_id群組，然後找最小的年份
# select product_id, min(year) as year
# from Sales Group by product_id

# 然後在main query 找product_id, year, quantity, price，4個行
# 用where去把 (product_id, year)相關的資料限定在sub query的範圍
# select product_id, year as first_year, quantity, price
# from Sales
# Where (product_id, year) in (subquery)


550. Game Play Analysis IV------------------------------------------------

select round(count(distinct player_id) / (select count(distinct player_id) from Activity), 2) as fraction
from Activity
where (player_id, date_sub(event_date, interval 1 day)) in
  (select player_id, MIN(event_date) as first_login 
  from Activity 
  group by player_id)

# select count(distinct player_id) from Activity 用來算Activity中，不重複的player_id
# 前面沒有from的會依照下方的from...，當成資料來源
# 下面的from的 where in 是在哪個範圍中做搜尋
# 又有用where去縮成只有最小日期的部份

#date_sub() 加日期、date_sub() 減日期
#date_sub(datetime目標日期, INTERVAL expr unit多少數值、單位)，e.g.1 DAY/YESR/MONTH

# where [column] in [value]
# 1.子查詢要在括號()中。
# 2.通常子查詢SELECT只會取得單一欄位的值，以便主查詢的欄位進行比較運算。
# 3.如需排序，子查詢不能使用ORDER BY，只能使用GROUP BY 子句。
# 4.如果子查詢可以取得多筆資料，在主查詢需使用IN邏輯運算子。
# https://ithelp.ithome.com.tw/articles/10219497


1045. Customers Who Bought All Products------------------------------------------------
select customer_id
from Customer
group by customer_id
having count(distinct product_key) = (select count(*) from Product)


570. Managers with at Least 5 Direct Reports------------------------------------------------
方法1：用where+having的subquery，subquery中，不能用 count * as num 和 where num >= 5是因為num是聚合函數，where不能處理
SELECT name
FROM Employee
WHERE id IN (
    SELECT managerId
    FROM Employee
    GROUP BY managerId
    HAVING COUNT(*) >= 5
);

方法2：join，將員工的資料視為額外的表，再計算員工數
select a.name
from Employee as a 
join (Employee as b)
    on a.id = b.managerId
group by b.managerId
having count(b.id) >= 5

1484. Group Sold Products By The Date------------------------------------------------
select sell_date , count(distinct product) as num_sold, group_concat(distinct product order by product asc separator ',') as products
from Activities 
group by sell_date  

#group_concat接合大量字串、concat接合兩個字串，separator [] 用[]隔開


595. Big Countries------------------------------------------------
select name, population, area
from World 
where population >= 25000000 or area >=3000000 


602. Friend Requests II: Who Has the Most Friends------------------------------------------------
with all_id as (
    select requester_id as id
    from RequestAccepted 
    union all
    select accepter_id as id
    from RequestAccepted 
    )

select id, count(*) as num
from all_id
group by id
order by num desc
limit 1

#union distinct是整合兩個表格，會去除重複的，union all是會留下所有資料


2356. Number of Unique Subjects Taught by Each Teacher------------------------------------------------

select teacher_id, count(distinct subject_id) as cnt
from Teacher 
group by teacher_id


1174. Immediate Food Delivery II------------------------------------------------
select round(avg(customer_pref_delivery_date = order_date)*100,2) as immediate_percentage
From Delivery
Where (customer_id, order_date) in 
    (select customer_id, min(order_date) 
    from Delivery
    Group by customer_id);

#可以在select用customer_pref_delivery_date = order_date


1757. Recyclable and Low Fat Products------------------------------------------------
select product_id 
from Products 
where low_fats = 'Y' and recyclable = 'Y'


1581. Customer Who Visited but Did Not Make Any Transactions------------------------------------------------
方法1：用where的subquery找沒有轉帳的人
select customer_id, count(*) as count_no_trans 
from Visits
where visit_id not in (select visit_id from Transactions)
group by customer_id

方法2：left join Visits和Transactions，計算Transactions為0的人
select v.customer_id , count(v.customer_id) as count_no_trans 
from Visits as v left join Transactions as t
 on v.visit_id = t.visit_id
where t.transaction_id is null
group by customer_id


1141. User Activity for the Past 30 Days I------------------------------------------------
select activity_date as day, count(distinct user_id) as active_users 
from Activity 
where activity_date >= '2019-06-28' and activity_date <= '2019-07-27'
group by activity_date


1729. Find Followers Count------------------------------------------------
select user_id, count(*) as followers_count
from Followers 
group by user_id 
order by user_id


1075. Project Employees I------------------------------------------------
select p.project_id, round(avg(e.experience_years), 2) as average_years 
from Project p left join Employee e on p.employee_id = e.employee_id 
group by p.project_id  


610. Triangle Judgement------------------------------------------------
select *, case when x+y>z and x+z>y and y+z>x then 'Yes' else 'No' end as triangle 
from Triangle

#case when用法
case when [條件] then [符合條件的結果] else [不符合的結果] end (as [cloumn])


577. Employee Bonus------------------------------------------------
select e.name, b.bonus 
from Employee e left join Bonus b on e.empId = b.empId 
where b.bonus < 1000 or b.bonus is null


620. Not Boring Movies------------------------------------------------
select *
from Cinema 
where description != 'boring'
having id%2 != 0
order by rating desc


197. Rising Temperature------------------------------------------------
SELECT w1.id
FROM Weather w1 JOIN Weather w2 
    on w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)
WHERE w1.temperature > w2.temperature;

#DATE_ADD() 給日期時間增加指定的間隔
#DATE_SUB() 給日期時間減去指定的間隔
#DATEDIFF() 日期相減
#TIMESTAMPDIFF() 日期時間相減


1068. Product Sales Analysis I------------------------------------------------
select p.product_name, s.year, s.price 
from Sales s left join Product p on s.product_id = p.product_id


1211. Queries Quality and Percentage------------------------------------------------
select query_name, round(avg(rating / position),2) as quality,
round((sum(rating < 3) /count(*)*100),2) as poor_query_percentage 
from Queries 
where query_name is not null
group by query_name 

# sum(rating<3)，rating<3會產生一串1,0,1..的布林數列，用sum的話可以算有多少=yes


1327. List the Products Ordered in a Period------------------------------------------------
with temp as(
select product_id, sum(unit) as unit
from Orders
where order_date >= '2020-02-01' and order_date <= '2020-02-29'
    #where order_date between '2020-02-01' and '2020-02-29'
group by product_id)

select p.product_name, t.unit 
from temp t left join Products p on t.product_id = p.product_id
where t.unit >= 100






















